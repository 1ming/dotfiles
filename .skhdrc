# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# open apps
alt - return : open -a "/Applications/iTerm.app"

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window (swaps the entire stack)
shift + cmd - k : yabai -m window --swap north
shift + cmd - j : yabai -m window --swap south
shift + cmd - h : yabai -m window --swap west
shift + cmd - l : yabai -m window --swap east

# move window (only moves the focused window on the stack)
shift + alt + cmd - h : yabai -m window --warp west
shift + alt + cmd - j : yabai -m window --warp south
shift + alt + cmd - k : yabai -m window --warp north
shift + alt + cmd - l : yabai -m window --warp east

# Resize windows
ctrl + alt - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
ctrl + alt - j : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
ctrl + alt - k : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
ctrl + alt - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# balance size of windows
ctrl + alt - 0 : yabai -m space --balance

# Add the active window  to the window or stack to the {direction}
# Note that this only works when the active window does *not* already belong to a stack
ctrl + alt + cmd - h  : yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
ctrl + alt + cmd - j  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
ctrl + alt + cmd - k    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
ctrl + alt + cmd - l : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')

# change focus within window stack
shift + alt - k : yabai -m window --focus stack.prev
shift + alt - j : yabai -m window --focus stack.next
shift + alt - n : yabai -m window --focus stack.last
shift + alt - p : yabai -m window --focus stack.first

# make floating window fill screen
ctrl + alt + cmd - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
ctrl + alt + cmd - left   : yabai -m window --grid 1:2:0:0:1:1
ctrl + alt + cmd - right  : yabai -m window --grid 1:2:2:0:1:1

# focus monitor (sometimes this doesn't work for some reason)
ctrl + alt - z  : yabai -m display --focus next || yabai -m display --focus first
ctrl + alt - 1  : yabai -m display --focus 1
ctrl + alt - 2  : yabai -m display --focus 2

# send window to other monitor and follow focus
ctrl + alt - n  : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
	&& (yabai -m window --display next || yabai -m window --display first) \
	&& disp_id="$(yabai -m query --displays --display | jq -r '.id')" \
    && yabai -m window --focus "$win_id"


# set insertion point in focused container
ctrl + alt + shift - h : yabai -m window --insert west
ctrl + alt + shift - j : yabai -m window --insert south
ctrl + alt + shift - k : yabai -m window --insert north
ctrl + alt + shift - l : yabai -m window --insert east

# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# open new window and stack it on top of current window
ctrl + alt + shift - n : yabai -m window --insert stack

# toggle window split type
alt - e : yabai -m window --toggle split

# switch layout
ctrl + alt - a : yabai -m space --layout bsp
ctrl + alt - d : yabai -m space --layout float
ctrl + alt - s : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')

# cycle through spaces
# https://github.com/koekeishiya/yabai/issues/303
alt - c : yabai -m space --focus "$(yabai -m query --spaces --display \
    | jq 'reverse | nth(index(map(select(.focused == 1))) - 1).index')"

# cycle backwards
alt - z : yabai -m space --focus "$(yabai -m query --spaces --display \
    | jq 'nth(index(map(select(.focused == 1))) - 1).index')"

# go to specified space
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8

# move window to a specified space
shift + alt - 2 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 1 && yabai -m window --focus "$win_id")
shift + alt - 4 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 4 && yabai -m window --focus "$win_id")
shift + alt - 5 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 5 && yabai -m window --focus "$win_id")
shift + alt - 6 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 6 && yabai -m window --focus "$win_id")
shift + alt - 7 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 7 && yabai -m window --focus "$win_id")
shift + alt - 8 : win_id="$(yabai -m query --windows --window | jq -r '.id')" \
    && (yabai -m window --space 8 && yabai -m window --focus "$win_id")

# cycle all windows on space backwards by coordinate
alt - tab : yabai -m window --focus "$(yabai -m query --windows --space | jq -re "[sort_by(.id, .frame) | reverse | .[] | select(.role == \"AXWindow\" and .subrole == \"AXStandardWindow\") | .id] | nth(index($(yabai -m query --windows --window | jq -re ".id")) - 1)")"

# cycle all windows on space backwards by coordinate
shift + alt - tab : yabai -m window --focus "$(yabai -m query --windows --space | jq -re "[sort_by(.id, .frame) | .[] | select(.role == \"AXWindow\" and .subrole == \"AXStandardWindow\") | .id] | nth(index($(yabai -m query --windows --window | jq -re ".id")) - 1)")"


# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2; \
          yabai -m window --toggle border

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip
